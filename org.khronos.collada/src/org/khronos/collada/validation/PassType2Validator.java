/**
 *
 * $Id$
 */
package org.khronos.collada.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.util.FeatureMap;

import org.khronos.collada.AlphaFuncType1;
import org.khronos.collada.AlphaTestEnableType1;
import org.khronos.collada.AutoNormalEnableType;
import org.khronos.collada.BlendColorType;
import org.khronos.collada.BlendEnableType1;
import org.khronos.collada.BlendEquationSeparateType;
import org.khronos.collada.BlendEquationType;
import org.khronos.collada.BlendFuncSeparateType;
import org.khronos.collada.BlendFuncType1;
import org.khronos.collada.ClearColorType1;
import org.khronos.collada.ClearDepthType1;
import org.khronos.collada.ClearStencilType1;
import org.khronos.collada.ClipPlaneEnableType1;
import org.khronos.collada.ClipPlaneType1;
import org.khronos.collada.ColorLogicOpEnableType1;
import org.khronos.collada.ColorMaskType1;
import org.khronos.collada.ColorMaterialEnableType1;
import org.khronos.collada.ColorMaterialType;
import org.khronos.collada.CullFaceEnableType1;
import org.khronos.collada.CullFaceType1;
import org.khronos.collada.DepthBoundsEnableType;
import org.khronos.collada.DepthBoundsType;
import org.khronos.collada.DepthClampEnableType;
import org.khronos.collada.DepthFuncType1;
import org.khronos.collada.DepthMaskType1;
import org.khronos.collada.DepthRangeType1;
import org.khronos.collada.DepthTestEnableType1;
import org.khronos.collada.DitherEnableType1;
import org.khronos.collada.ExtraType;
import org.khronos.collada.FogColorType1;
import org.khronos.collada.FogCoordSrcType;
import org.khronos.collada.FogDensityType1;
import org.khronos.collada.FogEnableType1;
import org.khronos.collada.FogEndType1;
import org.khronos.collada.FogModeType1;
import org.khronos.collada.FogStartType1;
import org.khronos.collada.FrontFaceType1;
import org.khronos.collada.FxAnnotateCommon;
import org.khronos.collada.FxClearcolorCommon;
import org.khronos.collada.FxCleardepthCommon;
import org.khronos.collada.FxClearstencilCommon;
import org.khronos.collada.FxColortargetCommon;
import org.khronos.collada.FxDepthtargetCommon;
import org.khronos.collada.FxStenciltargetCommon;
import org.khronos.collada.LightAmbientType1;
import org.khronos.collada.LightConstantAttenuationType1;
import org.khronos.collada.LightDiffuseType1;
import org.khronos.collada.LightEnableType1;
import org.khronos.collada.LightLinearAttenuationType;
import org.khronos.collada.LightModelAmbientType1;
import org.khronos.collada.LightModelColorControlType;
import org.khronos.collada.LightModelLocalViewerEnableType;
import org.khronos.collada.LightModelTwoSideEnableType1;
import org.khronos.collada.LightPositionType1;
import org.khronos.collada.LightQuadraticAttenuationType1;
import org.khronos.collada.LightSpecularType1;
import org.khronos.collada.LightSpotCutoffType1;
import org.khronos.collada.LightSpotDirectionType1;
import org.khronos.collada.LightSpotExponentType1;
import org.khronos.collada.LightingEnableType1;
import org.khronos.collada.LineSmoothEnableType1;
import org.khronos.collada.LineStippleEnableType;
import org.khronos.collada.LineStippleType;
import org.khronos.collada.LineWidthType1;
import org.khronos.collada.LogicOpEnableType;
import org.khronos.collada.LogicOpType1;
import org.khronos.collada.MaterialAmbientType1;
import org.khronos.collada.MaterialDiffuseType1;
import org.khronos.collada.MaterialEmissionType1;
import org.khronos.collada.MaterialShininessType1;
import org.khronos.collada.MaterialSpecularType1;
import org.khronos.collada.ModelViewMatrixType1;
import org.khronos.collada.MultisampleEnableType1;
import org.khronos.collada.NormalizeEnableType1;
import org.khronos.collada.PointDistanceAttenuationType1;
import org.khronos.collada.PointFadeThresholdSizeType1;
import org.khronos.collada.PointSizeMaxType1;
import org.khronos.collada.PointSizeMinType1;
import org.khronos.collada.PointSizeType1;
import org.khronos.collada.PointSmoothEnableType1;
import org.khronos.collada.PolygonModeType;
import org.khronos.collada.PolygonOffsetFillEnableType1;
import org.khronos.collada.PolygonOffsetLineEnableType;
import org.khronos.collada.PolygonOffsetPointEnableType;
import org.khronos.collada.PolygonOffsetType1;
import org.khronos.collada.PolygonSmoothEnableType;
import org.khronos.collada.PolygonStippleEnableType;
import org.khronos.collada.ProjectionMatrixType1;
import org.khronos.collada.RescaleNormalEnableType1;
import org.khronos.collada.SampleAlphaToCoverageEnableType1;
import org.khronos.collada.SampleAlphaToOneEnableType1;
import org.khronos.collada.SampleCoverageEnableType1;
import org.khronos.collada.ScissorTestEnableType1;
import org.khronos.collada.ScissorType1;
import org.khronos.collada.ShadeModelType1;
import org.khronos.collada.ShaderType1;
import org.khronos.collada.StencilFuncSeparateType;
import org.khronos.collada.StencilFuncType1;
import org.khronos.collada.StencilMaskSeparateType;
import org.khronos.collada.StencilMaskType1;
import org.khronos.collada.StencilOpSeparateType;
import org.khronos.collada.StencilOpType1;
import org.khronos.collada.StencilTestEnableType1;
import org.khronos.collada.Texture1DEnableType;
import org.khronos.collada.Texture1DType;
import org.khronos.collada.Texture2DEnableType;
import org.khronos.collada.Texture2DType;
import org.khronos.collada.Texture3DEnableType;
import org.khronos.collada.Texture3DType;
import org.khronos.collada.TextureCUBEEnableType;
import org.khronos.collada.TextureCUBEType;
import org.khronos.collada.TextureDEPTHEnableType;
import org.khronos.collada.TextureDEPTHType;
import org.khronos.collada.TextureEnvColorType;
import org.khronos.collada.TextureEnvModeType;
import org.khronos.collada.TextureRECTEnableType;
import org.khronos.collada.TextureRECTType;

/**
 * A sample validator interface for {@link org.khronos.collada.PassType2}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface PassType2Validator {
	boolean validate();

	boolean validateAnnotate(EList<FxAnnotateCommon> value);
	boolean validateColorTarget(EList<FxColortargetCommon> value);
	boolean validateDepthTarget(EList<FxDepthtargetCommon> value);
	boolean validateStencilTarget(EList<FxStenciltargetCommon> value);
	boolean validateColorClear(EList<FxClearcolorCommon> value);
	boolean validateDepthClear(EList<FxCleardepthCommon> value);
	boolean validateStencilClear(EList<FxClearstencilCommon> value);
	boolean validateDraw(String value);
	boolean validateGroup(FeatureMap value);
	boolean validateAlphaFunc(EList<AlphaFuncType1> value);
	boolean validateBlendFunc(EList<BlendFuncType1> value);
	boolean validateBlendFuncSeparate(EList<BlendFuncSeparateType> value);
	boolean validateBlendEquation(EList<BlendEquationType> value);
	boolean validateBlendEquationSeparate(EList<BlendEquationSeparateType> value);
	boolean validateColorMaterial(EList<ColorMaterialType> value);
	boolean validateCullFace(EList<CullFaceType1> value);
	boolean validateDepthFunc(EList<DepthFuncType1> value);
	boolean validateFogMode(EList<FogModeType1> value);
	boolean validateFogCoordSrc(EList<FogCoordSrcType> value);
	boolean validateFrontFace(EList<FrontFaceType1> value);
	boolean validateLightModelColorControl(EList<LightModelColorControlType> value);
	boolean validateLogicOp(EList<LogicOpType1> value);
	boolean validatePolygonMode(EList<PolygonModeType> value);
	boolean validateShadeModel(EList<ShadeModelType1> value);
	boolean validateStencilFunc(EList<StencilFuncType1> value);
	boolean validateStencilOp(EList<StencilOpType1> value);
	boolean validateStencilFuncSeparate(EList<StencilFuncSeparateType> value);
	boolean validateStencilOpSeparate(EList<StencilOpSeparateType> value);
	boolean validateStencilMaskSeparate(EList<StencilMaskSeparateType> value);
	boolean validateLightEnable(EList<LightEnableType1> value);
	boolean validateLightAmbient(EList<LightAmbientType1> value);
	boolean validateLightDiffuse(EList<LightDiffuseType1> value);
	boolean validateLightSpecular(EList<LightSpecularType1> value);
	boolean validateLightPosition(EList<LightPositionType1> value);
	boolean validateLightConstantAttenuation(EList<LightConstantAttenuationType1> value);
	boolean validateLightLinearAttenuation(EList<LightLinearAttenuationType> value);
	boolean validateLightQuadraticAttenuation(EList<LightQuadraticAttenuationType1> value);
	boolean validateLightSpotCutoff(EList<LightSpotCutoffType1> value);
	boolean validateLightSpotDirection(EList<LightSpotDirectionType1> value);
	boolean validateLightSpotExponent(EList<LightSpotExponentType1> value);
	boolean validateTexture1D(EList<Texture1DType> value);
	boolean validateTexture2D(EList<Texture2DType> value);
	boolean validateTexture3D(EList<Texture3DType> value);
	boolean validateTextureCUBE(EList<TextureCUBEType> value);
	boolean validateTextureRECT(EList<TextureRECTType> value);
	boolean validateTextureDEPTH(EList<TextureDEPTHType> value);
	boolean validateTexture1DEnable(EList<Texture1DEnableType> value);
	boolean validateTexture2DEnable(EList<Texture2DEnableType> value);
	boolean validateTexture3DEnable(EList<Texture3DEnableType> value);
	boolean validateTextureCUBEEnable(EList<TextureCUBEEnableType> value);
	boolean validateTextureRECTEnable(EList<TextureRECTEnableType> value);
	boolean validateTextureDEPTHEnable(EList<TextureDEPTHEnableType> value);
	boolean validateTextureEnvColor(EList<TextureEnvColorType> value);
	boolean validateTextureEnvMode(EList<TextureEnvModeType> value);
	boolean validateClipPlane(EList<ClipPlaneType1> value);
	boolean validateClipPlaneEnable(EList<ClipPlaneEnableType1> value);
	boolean validateBlendColor(EList<BlendColorType> value);
	boolean validateClearColor(EList<ClearColorType1> value);
	boolean validateClearStencil(EList<ClearStencilType1> value);
	boolean validateClearDepth(EList<ClearDepthType1> value);
	boolean validateColorMask(EList<ColorMaskType1> value);
	boolean validateDepthBounds(EList<DepthBoundsType> value);
	boolean validateDepthMask(EList<DepthMaskType1> value);
	boolean validateDepthRange(EList<DepthRangeType1> value);
	boolean validateFogDensity(EList<FogDensityType1> value);
	boolean validateFogStart(EList<FogStartType1> value);
	boolean validateFogEnd(EList<FogEndType1> value);
	boolean validateFogColor(EList<FogColorType1> value);
	boolean validateLightModelAmbient(EList<LightModelAmbientType1> value);
	boolean validateLightingEnable(EList<LightingEnableType1> value);
	boolean validateLineStipple(EList<LineStippleType> value);
	boolean validateLineWidth(EList<LineWidthType1> value);
	boolean validateMaterialAmbient(EList<MaterialAmbientType1> value);
	boolean validateMaterialDiffuse(EList<MaterialDiffuseType1> value);
	boolean validateMaterialEmission(EList<MaterialEmissionType1> value);
	boolean validateMaterialShininess(EList<MaterialShininessType1> value);
	boolean validateMaterialSpecular(EList<MaterialSpecularType1> value);
	boolean validateModelViewMatrix(EList<ModelViewMatrixType1> value);
	boolean validatePointDistanceAttenuation(EList<PointDistanceAttenuationType1> value);
	boolean validatePointFadeThresholdSize(EList<PointFadeThresholdSizeType1> value);
	boolean validatePointSize(EList<PointSizeType1> value);
	boolean validatePointSizeMin(EList<PointSizeMinType1> value);
	boolean validatePointSizeMax(EList<PointSizeMaxType1> value);
	boolean validatePolygonOffset(EList<PolygonOffsetType1> value);
	boolean validateProjectionMatrix(EList<ProjectionMatrixType1> value);
	boolean validateScissor(EList<ScissorType1> value);
	boolean validateStencilMask(EList<StencilMaskType1> value);
	boolean validateAlphaTestEnable(EList<AlphaTestEnableType1> value);
	boolean validateAutoNormalEnable(EList<AutoNormalEnableType> value);
	boolean validateBlendEnable(EList<BlendEnableType1> value);
	boolean validateColorLogicOpEnable(EList<ColorLogicOpEnableType1> value);
	boolean validateColorMaterialEnable(EList<ColorMaterialEnableType1> value);
	boolean validateCullFaceEnable(EList<CullFaceEnableType1> value);
	boolean validateDepthBoundsEnable(EList<DepthBoundsEnableType> value);
	boolean validateDepthClampEnable(EList<DepthClampEnableType> value);
	boolean validateDepthTestEnable(EList<DepthTestEnableType1> value);
	boolean validateDitherEnable(EList<DitherEnableType1> value);
	boolean validateFogEnable(EList<FogEnableType1> value);
	boolean validateLightModelLocalViewerEnable(EList<LightModelLocalViewerEnableType> value);
	boolean validateLightModelTwoSideEnable(EList<LightModelTwoSideEnableType1> value);
	boolean validateLineSmoothEnable(EList<LineSmoothEnableType1> value);
	boolean validateLineStippleEnable(EList<LineStippleEnableType> value);
	boolean validateLogicOpEnable(EList<LogicOpEnableType> value);
	boolean validateMultisampleEnable(EList<MultisampleEnableType1> value);
	boolean validateNormalizeEnable(EList<NormalizeEnableType1> value);
	boolean validatePointSmoothEnable(EList<PointSmoothEnableType1> value);
	boolean validatePolygonOffsetFillEnable(EList<PolygonOffsetFillEnableType1> value);
	boolean validatePolygonOffsetLineEnable(EList<PolygonOffsetLineEnableType> value);
	boolean validatePolygonOffsetPointEnable(EList<PolygonOffsetPointEnableType> value);
	boolean validatePolygonSmoothEnable(EList<PolygonSmoothEnableType> value);
	boolean validatePolygonStippleEnable(EList<PolygonStippleEnableType> value);
	boolean validateRescaleNormalEnable(EList<RescaleNormalEnableType1> value);
	boolean validateSampleAlphaToCoverageEnable(EList<SampleAlphaToCoverageEnableType1> value);
	boolean validateSampleAlphaToOneEnable(EList<SampleAlphaToOneEnableType1> value);
	boolean validateSampleCoverageEnable(EList<SampleCoverageEnableType1> value);
	boolean validateScissorTestEnable(EList<ScissorTestEnableType1> value);
	boolean validateStencilTestEnable(EList<StencilTestEnableType1> value);
	boolean validateGlHookAbstractGroup(FeatureMap value);
	boolean validateGlHookAbstract(EList<EObject> value);
	boolean validateShader(EList<ShaderType1> value);
	boolean validateExtra(EList<ExtraType> value);
	boolean validateSid(String value);
}
